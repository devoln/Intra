<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

  <Type Name="Intra::Range::Span&lt;char&gt;">
    <DisplayString IncludeView="Length">{End - Begin}</DisplayString>
    <DisplayString>{Begin,[End-Begin]s8}</DisplayString>
    <StringView>Begin,[End-Begin]s8b</StringView>
    <Expand>
      <Item Name="Length">End-Begin</Item>
      <Item Name="StartPtr">Begin</Item>
      <Item Name="EndPtr">End</Item>
    </Expand>
  </Type>

  <Type Name="Intra::Range::Span&lt;wchar&gt;">
    <DisplayString IncludeView="Length">{End - Begin}</DisplayString>
    <DisplayString>{Begin,[End-Begin]s16}</DisplayString>
    <StringView>Begin,[End-Begin]s16b</StringView>
    <Expand>
      <Item Name="Length">End-Begin</Item>
      <Item Name="StartPtr">Begin</Item>
      <Item Name="EndPtr">End</Item>
    </Expand>
  </Type>

  <Type Name="Intra::Range::Span&lt;dchar&gt;">
    <DisplayString IncludeView="Length">{End - Begin}</DisplayString>
    <DisplayString>{Begin,[End-Begin]s32}</DisplayString>
    <StringView>Begin,[End-Begin]s32b</StringView>
    <Expand>
      <Item Name="Length">End - Begin</Item>
      <Item Name="StartPtr">Begin</Item>
      <Item Name="EndPtr">End</Item>
    </Expand>
  </Type>

    <Type Name="Intra::Range::Span&lt;*&gt;">
        <DisplayString IncludeView="Length">{End - Begin}</DisplayString>
        <DisplayString Condition="Begin==End">[]</DisplayString>
        <DisplayString Condition="Begin+1==End">[{Begin[0]}]</DisplayString>
        <DisplayString Condition="Begin+2==End">[{Begin[0]}, {Begin[1]}]</DisplayString>
        <DisplayString Condition="Begin+3==End">[{Begin[0]}, {Begin[1]}, {Begin[2]}]</DisplayString>
        <DisplayString Condition="Begin+4==End">[{Begin[0]}, {Begin[1]}, {Begin[2]}, {Begin[3]}]</DisplayString>
        <DisplayString Condition="Begin+5==End">[{Begin[0]}, {Begin[1]}, {Begin[2]}, {Begin[3]}, {Begin[4]}]</DisplayString>
        <DisplayString>({End-Begin})[{Begin[0]}, {Begin[1]}, {Begin[2]}, {Begin[3]}, {Begin[4]}, ...]</DisplayString>
        <Expand>
            <Item Name="Begin Pointer" ExcludeView="simple">(void*)Begin</Item>
            <Item Name="End Pointer" ExcludeView="simple">(void*)End</Item>
            <ArrayItems>
			          <Size>End-Begin</Size>
                <ValuePointer>Begin</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

  <Type Name="Intra::Range::GenericStringView&lt;*&gt;">
    <DisplayString IncludeView="Length">{End - Begin}</DisplayString>
    <DisplayString Condition="sizeof(*Begin)==1" Optional="true">{Begin,[End-Begin]s8}</DisplayString>
    <DisplayString Condition="sizeof(*Begin)==2" Optional="true">{Begin,[End-Begin]s16}</DisplayString>
    <DisplayString Condition="sizeof(*Begin)==4" Optional="true">{Begin,[End-Begin]s32}</DisplayString>
    <StringView Condition="sizeof(*Begin)==1" Optional="true">Begin,[End-Begin]s8b</StringView>
    <StringView Condition="sizeof(*Begin)==2" Optional="true">Begin,[End-Begin]s16b</StringView>
    <StringView Condition="sizeof(*Begin)==4" Optional="true">Begin,[End-Begin]s32b</StringView>
    <Expand>
      <Item Name="Length">End-Begin</Item>
      <ArrayItems>
        <Size>End-Begin</Size>
        <ValuePointer>Begin</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  

  <Type Name="Intra::Range::FListRange&lt;*&gt;">
    <DisplayString Condition="FirstNode==nullptr || LastNode==nullptr">[]</DisplayString>
    <DisplayString Condition="FirstNode==LastNode">[{FirstNode->Value}]"</DisplayString>
    <DisplayString Condition="FirstNode->Next==LastNode">[{FirstNode->Value}, {LastNode->Value}]"</DisplayString>
    <DisplayString Condition="FirstNode->Next->Next==LastNode">[{FirstNode->Value}, {FirstNode->Next->Value}, {LastNode->Value}]"</DisplayString>
    <DisplayString Condition="FirstNode->Next->Next->Next==LastNode">[{FirstNode->Value}, {FirstNode->Next->Value}, {FirstNode->Next->Next->Value}, {LastNode->Value}]"</DisplayString>
    <DisplayString Condition="FirstNode->Next->Next->Next->Next==LastNode">[{FirstNode->Value}, {FirstNode->Next->Value}, {FirstNode->Next->Next->Value}, {FirstNode->Next->Next->Next->Value}, {LastNode->Value}]"</DisplayString>
    <DisplayString>[{FirstNode->Value}, {FirstNode->Next->Value}, {FirstNode->Next->Next->Value}, {FirstNode->Next->Next->Next->Value}, ..., {LastNode->Value}]"</DisplayString>
    <Expand>
      <LinkedListItems>
        <HeadPointer>FirstNode</HeadPointer>
        <NextPointer>Next</NextPointer>
        <ValueNode>Value</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  <Type Name="Intra::Range::BListRange&lt;*&gt;">
    <DisplayString Condition="FirstNode==nullptr || LastNode==nullptr">[]</DisplayString>
    <DisplayString Condition="FirstNode==LastNode">[{FirstNode->Value}]"</DisplayString>
    <DisplayString Condition="FirstNode->Next==LastNode">[{FirstNode->Value}, {LastNode->Value}]"</DisplayString>
    <DisplayString Condition="FirstNode->Next->Next==LastNode">[{FirstNode->Value}, {FirstNode->Next->Value}, {LastNode->Value}]"</DisplayString>
    <DisplayString Condition="FirstNode->Next->Next->Next==LastNode">[{FirstNode->Value}, {FirstNode->Next->Value}, {FirstNode->Next->Next->Value}, {LastNode->Value}]"</DisplayString>
    <DisplayString Condition="FirstNode->Next->Next->Next->Next==LastNode">[{FirstNode->Value}, {FirstNode->Next->Value}, {FirstNode->Next->Next->Value}, {FirstNode->Next->Next->Next->Value}, {LastNode->Value}]"</DisplayString>
    <DisplayString>[{FirstNode->Value}, {FirstNode->Next->Value}, {FirstNode->Next->Next->Value}, {FirstNode->Next->Next->Next->Value}, ..., {LastNode->Value}]"</DisplayString>
    <Expand>
      <LinkedListItems>
        <HeadPointer>FirstNode</HeadPointer>
        <NextPointer>Next</NextPointer>
        <ValueNode>Value</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  <Type Name="Intra::HashTableRange&lt;*&gt;" Priority="MediumLow">
    <DisplayString Condition="first_node==null || first_node->prev==last_node">[]</DisplayString>
    <DisplayString Condition="first_node==last_node">[{first_node->element}]</DisplayString>
    <DisplayString Condition="first_node->next==last_node">[{first_node->element}, {first_node->next->element}]</DisplayString>
    <DisplayString Condition="first_node->next->next==last_node">[{first_node->element}, {first_node->next->element}, {first_node->next->next->element}]</DisplayString>
    <DisplayString Condition="first_node->next->next->next==last_node">[{first_node->element}, {first_node->next->element}, {first_node->next->next->element}, {first_node->next->next->next->element}]</DisplayString>
    <DisplayString>[{first_node->element}, {first_node->next->element}, {first_node->next->next->element}, ..., {last_node->element}]</DisplayString>
    <Expand>
      <LinkedListItems>
        <HeadPointer>first_node</HeadPointer>
        <NextPointer>next</NextPointer>
        <ValueNode>element</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  <Type Name="Intra::HashTableRange&lt;*&gt;" Priority="Medium">
    <DisplayString Condition="mFirstNode==nullptr || mFirstNode->prev==mLastNode">[]</DisplayString>
    <DisplayString Condition="mFirstNode==mLastNode">[{mFirstNode->element}]</DisplayString>
    <DisplayString Condition="mFirstNode->next==mLastNode">[{mFirstNode->element}, {mFirstNode->next->element}]</DisplayString>
    <DisplayString Condition="mFirstNode->next->next==mLastNode">[{mFirstNode->element}, {mFirstNode->next->element}, {mFirstNode->next->next->element}]</DisplayString>
    <DisplayString Condition="mFirstNode->next->next->next==mLastNode">[{mFirstNode->element}, {mFirstNode->next->element}, {mFirstNode->next->next->element}, {mFirstNode->next->next->next->element}]</DisplayString>
    <DisplayString>[{mFirstNode->element}, {mFirstNode->next->element}, {mFirstNode->next->next->element}, ..., {mLastNode->element}]</DisplayString>
    <Expand>
      <LinkedListItems>
        <HeadPointer>mFirstNode</HeadPointer>
        <NextPointer>next</NextPointer>
        <ValueNode Name="[{element.Key}]">element.Value</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  
  <Type Name="Intra::Range::InputRangeIterator&lt;*&gt;">
    <DisplayString>InputIterator {OriginalRange}</DisplayString>
    <Expand>
      <Synthetic Name="[InputIterator]">
        <DisplayString>Referenced range:</DisplayString>
      </Synthetic>
      <ExpandedItem>Range</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="Intra::Range::ForwardRangeIterator&lt;*&gt;">
    <DisplayString>Iterator {Range}</DisplayString>
    <Expand>
      <Synthetic Name="[Iterator]">
        <DisplayString>Range:</DisplayString>
      </Synthetic>
      <ExpandedItem>Range</ExpandedItem>
    </Expand>
  </Type>
  
  
  <Type Name="Intra::Math::SineRange&lt;*&gt;" Priority="Medium">
    <DisplayString>Sine[{mS2}, {mK*mS2-mS1}, {mK*(mK*mS2-mS1)-mS2}, ...]</DisplayString>
  </Type>

</AutoVisualizer>
