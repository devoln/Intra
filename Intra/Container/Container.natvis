<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	
    <Type Name="Intra::Container::GenericString&lt;char&gt;">
        <DisplayString Condition="m.Capacity &amp; SSO_LONG_BIT_MASK">{m.Data,[m.Len]s8}</DisplayString>
        <DisplayString Condition="!(m.Capacity &amp; SSO_LONG_BIT_MASK)">{mBuffer,[SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)]s8}</DisplayString>
        <DisplayString>&lt;ERROR&gt;</DisplayString>  
        <StringView Condition="m.Capacity &amp; SSO_LONG_BIT_MASK">m.Data,[m.Len]s8b</StringView>
        <StringView Condition="!(m.Capacity &amp; SSO_LONG_BIT_MASK)">mBuffer,[SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)]s8b</StringView>
        <Expand> 
            <Item Name="Length">(m.Capacity &amp; SSO_LONG_BIT_MASK)? m.Len: SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)</Item>
            <Item Name="Capacity">(m.Capacity &amp; SSO_LONG_BIT_MASK)? (m.Capacity &amp; SSO_CAPACITY_MASK) >> SSO_CAPACITY_RIGHT_SHIFT: SSO_BUFFER_CAPACITY_CHARS</Item>
            <Item Name="Begin">(m.Capacity &amp; SSO_LONG_BIT_MASK)? m.Data: mBuffer</Item>
            <Item Name="End">((m.Capacity &amp; SSO_LONG_BIT_MASK)? m.Data+m.Len: mBuffer+(SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)))</Item>
            <Item Name="Is heap allocated?">(m.Capacity &amp; SSO_LONG_BIT_MASK)!=0</Item>
        </Expand> 
    </Type>

  <Type Name="Intra::Container::GenericString&lt;char16_t&gt;">
    <DisplayString Condition="m.Capacity &amp; SSO_LONG_BIT_MASK">{m.Data,[m.Len]su}</DisplayString>
    <DisplayString Condition="!(m.Capacity &amp; SSO_LONG_BIT_MASK)">{mBuffer,[SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)]su}</DisplayString>
    <DisplayString>&lt;ERROR&gt;</DisplayString>
    <StringView Condition="m.Capacity &amp; SSO_LONG_BIT_MASK">m.Data,[m.Len]sub</StringView>
    <StringView Condition="!(m.Capacity &amp; SSO_LONG_BIT_MASK)">mBuffer,[SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)]sub</StringView>
    <Expand>
      <Item Name="Length">(m.Capacity &amp; SSO_LONG_BIT_MASK)? m.Len: SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)</Item>
      <Item Name="Capacity">(m.Capacity &amp; SSO_LONG_BIT_MASK)? (m.Capacity &amp; SSO_CAPACITY_MASK) >> SSO_CAPACITY_RIGHT_SHIFT: SSO_BUFFER_CAPACITY_CHARS</Item>
      <Item Name="Begin">(m.Capacity &amp; SSO_LONG_BIT_MASK)? m.Data: mBuffer</Item>
      <Item Name="End">((m.Capacity &amp; SSO_LONG_BIT_MASK)? m.Data+m.Len: mBuffer+(SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)))</Item>
      <Item Name="Is heap allocated?">(m.Capacity &amp; SSO_LONG_BIT_MASK)!=0</Item>
    </Expand>
  </Type>

  <Type Name="Intra::Container::GenericString&lt;wchar_t&gt;">
    <DisplayString Condition="m.Capacity &amp; SSO_LONG_BIT_MASK">{m.Data,[m.Len]su}</DisplayString>
    <DisplayString Condition="!(m.Capacity &amp; SSO_LONG_BIT_MASK)">{mBuffer,[SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)]su}</DisplayString>
    <DisplayString>&lt;ERROR&gt;</DisplayString>
    <StringView Condition="m.Capacity &amp; SSO_LONG_BIT_MASK">m.Data,[m.Len]sub</StringView>
    <StringView Condition="!(m.Capacity &amp; SSO_LONG_BIT_MASK)">mBuffer,[SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)]sub</StringView>
    <Expand>
      <Item Name="Length">(m.Capacity &amp; SSO_LONG_BIT_MASK)? m.Len: SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)</Item>
      <Item Name="Capacity">(m.Capacity &amp; SSO_LONG_BIT_MASK)? (m.Capacity &amp; SSO_CAPACITY_MASK) >> SSO_CAPACITY_RIGHT_SHIFT: SSO_BUFFER_CAPACITY_CHARS</Item>
      <Item Name="Begin">(m.Capacity &amp; SSO_LONG_BIT_MASK)? m.Data: mBuffer</Item>
      <Item Name="End">((m.Capacity &amp; SSO_LONG_BIT_MASK)? m.Data+m.Len: mBuffer+(SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)))</Item>
      <Item Name="Is heap allocated?">(m.Capacity &amp; SSO_LONG_BIT_MASK)!=0</Item>
    </Expand>
  </Type>

  <Type Name="Intra::Container::GenericString&lt;char32_t&gt;">
    <DisplayString Condition="m.Capacity &amp; SSO_LONG_BIT_MASK">{m.Data,[m.Len]s32}</DisplayString>
    <DisplayString Condition="!(m.Capacity &amp; SSO_LONG_BIT_MASK)">{mBuffer,[SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)]s32}</DisplayString>
    <StringView Condition="m.Capacity &amp; SSO_LONG_BIT_MASK">m.Data,[m.Len]s32b</StringView>
    <StringView Condition="!(m.Capacity &amp; SSO_LONG_BIT_MASK)">mBuffer,[SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)]s32b</StringView>
    <Expand>
      <Item Name="Length">(m.Capacity &amp; SSO_LONG_BIT_MASK)? m.Len: SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)</Item>
      <Item Name="Capacity">(m.Capacity &amp; SSO_LONG_BIT_MASK)? (m.Capacity &amp; SSO_CAPACITY_MASK) >> SSO_CAPACITY_RIGHT_SHIFT: SSO_BUFFER_CAPACITY_CHARS</Item>
      <Item Name="Begin">(m.Capacity &amp; SSO_LONG_BIT_MASK)? m.Data: mBuffer</Item>
      <Item Name="End">((m.Capacity &amp; SSO_LONG_BIT_MASK)? m.Data+m.Len: mBuffer+(SSO_BUFFER_CAPACITY_CHARS - (mBuffer[SSO_BUFFER_CAPACITY_CHARS] >> SSO_SHORT_SIZE_SHIFT)))</Item>
      <Item Name="Is heap allocated?">(m.Capacity &amp; SSO_LONG_BIT_MASK)!=0</Item>
    </Expand>
  </Type>

  
	
    <Type Name="Intra::Container::Array&lt;*&gt;">
        <DisplayString IncludeView="Length">{range,view(Length)}</DisplayString>
        <DisplayString>{range}</DisplayString>
        <Expand>
            <Item Name="Capacity" ExcludeView="simple">buffer.End - range.Begin</Item>
            <Item Name="Left Capacity" ExcludeView="simple">range.Begin - buffer.Begin</Item>
            <Item Name="Total Capacity" ExcludeView="simple">buffer.End - buffer.Begin</Item>
            <Item Name="Length" ExcludeView="simple">range.End - range.Begin</Item>
            <ExpandedItem>range,view(simple)</ExpandedItem>
        </Expand>
    </Type>

  <Type Name="Intra::Container::LinearSet&lt;*&gt;">
    <DisplayString>{mData}</DisplayString>
    <Expand>
      <ExpandedItem>mData</ExpandedItem>
    </Expand>
  </Type>
	
	  <Type Name="Intra::Container::BList&lt;*&gt;">
      <DisplayString Condition="mCount==0">[]</DisplayString>
	    <DisplayString Condition="(mRange.FirstNode==null || mRange.LastNode==null) &amp;&amp; mCount!=0 || mCount==0 &amp;&amp; (mRange.FirstNode!=null || mRange.LastNode!=null)">&lt;INVALID&gt;</DisplayString>
      <DisplayString>BList({mCount}){mRange}</DisplayString>
      <Expand>
          <Item Name="Count" ExcludeView="simple">mCount</Item>
          <LinkedListItems>
                <Size>mCount</Size>
                <HeadPointer>mRange.FirstNode</HeadPointer>
                <NextPointer>Next</NextPointer>
                <ValueNode>Value</ValueNode>
            </LinkedListItems>
      </Expand>
    </Type>

  <Type Name="Intra::Container::HashMap&lt;*&gt;">
    <DisplayString>Map({(reinterpret_cast&lt;size_t*&gt;(mBucketHeads))[0]}) {mRange}</DisplayString>
    <Expand>
      <Item Name="Count">mBucketHeads!=null? (reinterpret_cast&lt;size_t*&gt;(mBucketHeads))[0]: 0</Item>
      <ExpandedItem>mRange</ExpandedItem>
    </Expand>
  </Type>
	  
	
</AutoVisualizer>

