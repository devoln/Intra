#pragma once

#include "Platform/FundamentalTypes.h"

namespace Intra { namespace Image {

struct ImageFormat;
enum ImageType: byte;
enum class CubeFace: byte;

ushort ImageFormatToGLInternal(ImageFormat format, bool useSwizzling);
ushort ImageFormatToGLExternal(ImageFormat format, bool swapRB, bool useSwizzling);
ushort ImageFormatToGLType(ImageFormat format);
bool GLFormatSwapRB(ushort extFormat);
ImageFormat GLenumToImageFormat(ushort internalFormat);
ushort ImageTypeToGLTarget(ImageType type);
ushort CubeFaceToGLTarget(CubeFace cf);
ImageType GLTargetToImageType(ushort gl_Target);


namespace GL {

namespace Formats {

enum: ushort
{
	STENCIL_INDEX = 0x1901, DEPTH_COMPONENT = 0x1902,
	RED = 0x1903, GREEN = 0x1904, BLUE = 0x1905, ALPHA = 0x1906,
	RGB = 0x1907, RGBA = 0x1908, LUMINANCE = 0x1909, LUMINANCE_ALPHA = 0x190A,

	ALPHA4 = 0x803B, ALPHA8 = 0x803C, ALPHA12 = 0x803D, ALPHA16 = 0x803E,
	LUMINANCE4 = 0x803F, LUMINANCE8 = 0x8040, LUMINANCE12 = 0x8041, LUMINANCE16 = 0x8042,
	LUMINANCE4_ALPHA4 = 0x8043, LUMINANCE6_ALPHA2 = 0x8044, LUMINANCE8_ALPHA8 = 0x8045, LUMINANCE12_ALPHA4 = 0x8046, LUMINANCE12_ALPHA12 = 0x8047, LUMINANCE16_ALPHA16 = 0x8048,
	INTENSITY = 0x8049, INTENSITY4 = 0x804A, INTENSITY8 = 0x804B, INTENSITY12 = 0x804C, INTENSITY16 = 0x804D,
	R3_G3_B2 = 0x2A10, RGB4 = 0x804F, RGB5 = 0x8050, RGB8 = 0x8051, RGB10 = 0x8052, RGB12 = 0x8053, RGB16 = 0x8054,
	RGBA2 = 0x8055, RGBA4 = 0x8056, RGB5_A1 = 0x8057, RGBA8 = 0x8058, RGB10_A2 = 0x8059, RGBA12 = 0x805A, RGBA16 = 0x805B,

	RED_INTEGER = 0x8D94, GREEN_INTEGER, BLUE_INTEGER, ALPHA_INTEGER,
	RGB_INTEGER, RGBA_INTEGER, BGR_INTEGER, BGRA_INTEGER,

	DEPTH_STENCIL = 0x84F9,
	DEPTH_COMPONENT16 = 0x81A5, DEPTH_COMPONENT24, DEPTH_COMPONENT32, DEPTH_COMPONENT32F = 0x8CAC, DEPTH32F_STENCIL8, DEPTH24_STENCIL8 = 0x88F0,

	BGR = 0x80E0, BGRA,
	RGBA32F = 0x8814, RGB32F, LUMINANCE32F = 0x8818, RGBA16F = 0x881A, RGB16F, LUMINANCE16F = 0x881E,

	SRGB = 0x8C40, SRGB8, SRGB_ALPHA, SRGB8_ALPHA8, SLUMINANCE_ALPHA, SLUMINANCE8_ALPHA8, SLUMINANCE, SLUMINANCE8,
	COMPRESSED_SRGB, COMPRESSED_SRGB_ALPHA, COMPRESSED_SLUMINANCE, COMPRESSED_SLUMINANCE_ALPHA,
	COMPRESSED_SRGB_S3TC_DXT1_EXT, COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT, COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT, COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,

	COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0, COMPRESSED_RGBA_S3TC_DXT1_EXT, COMPRESSED_RGBA_S3TC_DXT3_EXT, COMPRESSED_RGBA_S3TC_DXT5_EXT,

	//RED_SNORM=0x8F90, RG_SNORM, RGB_SNORM, RGBA_SNORM,
	R8_SNORM = 0x8F94, RG8_SNORM, RGB8_SNORM, RGBA8_SNORM, R16_SNORM, RG16_SNORM, RGB16_SNORM, RGBA16_SNORM,

	R8 = 0x8229, R16, RG8, RG16, R16F, R32F, RG16F, RG32F,
	R8I, R8UI, R16I, R16UI, R32I, R32UI,
	RG8I, RG8UI, RG16I, RG16UI, RG32I, RG32UI,
	COMPRESSED_RED = 0x8225, COMPRESSED_RG, RG, RG_INTEGER = 0x8228,

	RGBA32UI = 0x8D70, RGB32UI, RGBA16UI = 0x8D76, RGB16UI, RGBA8UI = 0x8D7C, RGB8UI,
	RGBA32I = 0x8D82, RGB32I, RGBA16I = 0x8D88, RGB16I, RGBA8I = 0x8D8E, RGB8I,

	RGB10_A2UI = 0x906F, RGB9_E5 = 0x8C3D, R11F_G11F_B10F = 0x8C3A, RGB565 = 0x8D62,

	COMPRESSED_R11_EAC = 0x9270, COMPRESSED_SIGNED_R11_EAC, COMPRESSED_RG11_EAC, COMPRESSED_SIGNED_RG11_EAC,
	COMPRESSED_RGB8_ETC2, COMPRESSED_SRGB8_ETC2, COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,
	COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2, COMPRESSED_RGBA8_ETC2_EAC, COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,

	COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C, COMPRESSED_SRGB_ALPHA_BPTC_UNORM, COMPRESSED_RGB_BPTC_SIGNED_FLOAT, COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT,

	COMPRESSED_RED_RGTC1 = 0x8DBB, COMPRESSED_SIGNED_RED_RGTC1, COMPRESSED_RG_RGTC2, COMPRESSED_SIGNED_RG_RGTC2,
	_3DC_X_AMD = 0x87F9, _3DC_XY_AMD, //Вроде тот же RGTC на Adreno (из расширения AMD_compressed_3DC_texture)

	COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70, COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT,
	COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT, COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT,

	COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00, COMPRESSED_RGB_PVRTC_2BPPV1_IMG, COMPRESSED_RGBA_PVRTC_4BPPV1_IMG, COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,

	COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = 0x8837,
	ATC_RGB_AMD = 0x8C92, ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8C93, ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x87EE,

	ETC1_RGB8_OES = 0x8D64,

	COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0, COMPRESSED_RGBA_ASTC_5x4_KHR, COMPRESSED_RGBA_ASTC_5x5_KHR,
	COMPRESSED_RGBA_ASTC_6x5_KHR, COMPRESSED_RGBA_ASTC_6x6_KHR, COMPRESSED_RGBA_ASTC_8x5_KHR,
	COMPRESSED_RGBA_ASTC_8x6_KHR, COMPRESSED_RGBA_ASTC_8x8_KHR, COMPRESSED_RGBA_ASTC_10x5_KHR,
	COMPRESSED_RGBA_ASTC_10x6_KHR, COMPRESSED_RGBA_ASTC_10x8_KHR, COMPRESSED_RGBA_ASTC_10x10_KHR,
	COMPRESSED_RGBA_ASTC_12x10_KHR, COMPRESSED_RGBA_ASTC_12x12_KHR,

	COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0, COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR, COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR, COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR, COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR, COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR, COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR, COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR, COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,
	COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR, COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
};

}

using namespace Formats;

namespace Types {

enum: ushort
{
	BYTE = 0x1400, UNSIGNED_BYTE = 0x1401, SHORT = 0x1402, UNSIGNED_SHORT = 0x1403,
	INT = 0x1404, UNSIGNED_INT = 0x1405, FLOAT = 0x1406, DOUBLE = 0x140A,

	UNSIGNED_BYTE_3_3_2=0x8032, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_8_8_8_8, UNSIGNED_INT_10_10_10_2,
	UNSIGNED_SHORT_5_6_5=0x8363, UNSIGNED_INT_5_9_9_9_REV=0x8C3E, FLOAT_32_UNSIGNED_INT_24_8_REV=0x8DAD,
	UNSIGNED_INT_2_10_10_10_REV=0x8368, INT_2_10_10_10_REV=0x8D9F, UNSIGNED_INT_10F_11F_11F_REV=0x8C3B,
	UNSIGNED_SHORT_1_5_5_5_REV=0x8066,
	HALF_FLOAT=0x140B
};

}

using namespace Types;

namespace TextureTargets {

enum: ushort
{
	TEXTURE_1D = 0x0DE0, TEXTURE_2D = 0x0DE1,

	TEXTURE_CUBE_MAP = 0x8513, TEXTURE_3D = 0x806F,
	TEXTURE_1D_ARRAY = 0x8C18, TEXTURE_2D_ARRAY = 0x8C1A,
	TEXTURE_CUBE_MAP_ARRAY = 0x9009,

	TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515, TEXTURE_CUBE_MAP_NEGATIVE_X, TEXTURE_CUBE_MAP_POSITIVE_Y,
	TEXTURE_CUBE_MAP_NEGATIVE_Y, TEXTURE_CUBE_MAP_POSITIVE_Z, TEXTURE_CUBE_MAP_NEGATIVE_Z
};

}

using namespace TextureTargets;

}

}}
